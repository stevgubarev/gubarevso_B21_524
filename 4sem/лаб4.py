# -*- coding: utf-8 -*-
"""лаб4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lrhrPrrj5K-FF5BwiRUXT_MGYBpnPC0D

Вариант 6

Оператор Шарра 3 на 3
"""

from PIL import Image
from time import time_ns
import math
import numpy as np

image = Image.open('/content/test_2.png')

def convert_image_to_grayscale(input_image) -> Image:
   result_image = Image.new('L', (input_image.width, input_image.height))

   for x in range(result_image.width):
      for y in range(result_image.height):
          pixel = input_image.getpixel((x, y))
          average_brightness = sum(pixel) // len(pixel)
          result_image.putpixel((x, y), average_brightness)
   result_image.save('grey_image_result.png')

   return result_image
grey_image=convert_image_to_grayscale(image)

padding = (1, 1)
padded_image = np.pad(grey_image, padding, 'edge')

def sharr_filter(image, func):
    height, width = padded_image.shape

    res = np.zeros((height - 2, width - 2), dtype=np.int32)

    for i in range(1, height - 1):
        for j in range(1, width - 1):
            block = padded_image[i - 1 : i + 2, j - 1 : j + 2]

            res[i - 1][j - 1] = func(block)

    return (255 * res / np.max(res)).astype(np.uint8)

kernel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
kernel_y = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])

apply_x = lambda block: np.sum(block * kernel_x)
x_grad = sharr_filter(padded_image, apply_x)
Image.fromarray(x_grad)

apply_y = lambda block: np.sum(block * kernel_y)
y_grad = sharr_filter(padded_image, apply_y)
Image.fromarray(y_grad)

apply_grad = lambda block: np.abs(np.sum(block * kernel_x)) + np.abs(np.sum(block * kernel_y))
grad = sharr_filter(padded_image, apply_grad)
Image.fromarray(grad)

image_edge = ((grad > 40) * 255).astype(np.uint8)
Image.fromarray(image_edge)