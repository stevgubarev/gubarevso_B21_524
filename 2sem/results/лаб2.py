# -*- coding: utf-8 -*-
"""лаб2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V0vXG1aMahJ9djbJgkw7GWdUl-B2xJbK
"""

from PIL import Image
from time import time_ns
import math
import numpy as np

def convert_image_to_grayscale(input_image) -> Image:
   result_image = Image.new('L', (input_image.width, input_image.height))

   for x in range(result_image.width):
      for y in range(result_image.height):
          pixel = input_image.getpixel((x, y))
          average_brightness = sum(pixel) // len(pixel)
          result_image.putpixel((x, y), average_brightness)
   result_image.save('grey_image_result.png')

   return result_image

def adaptive_singh_threshold(window_size):
    # Открывает изображение
    input_image = Image.open('/content/grey_image_result.png')
    input_array = np.array(input_image)

    # Получает размеры изображения
    height, width = input_array.shape[:2]
    k = 0.1

    # Проверяет и корректирует размер окна
    if window_size % 2 == 0:
        window_size += 1

    # Создает отраженный отступ и массив для результата
    pad_img = np.pad(input_array, window_size, mode="reflect")
    output_array = np.zeros((height, width), dtype=input_array.dtype)

    # Итерирует по каждому пикселю изображения
    for i in range(height):
        for j in range(width):
            local_window = pad_img[i:i+window_size, j:j+window_size]
            local_mean = np.mean(local_window)
            local_delta = np.std(local_window)

            # Вычисляет пороговое значение по формуле Сингха
            if local_mean != 0 and 1 - local_delta != 0:
                threshold = local_mean * (1 + k * ((local_delta / (1 - local_delta) - 1)))
            else:
                threshold = 0

            # Производит бинаризацию пикселя
            if input_array[i, j] > threshold:
                output_array[i, j] = 255
            else:
                output_array[i, j] = 0

    # Создает новое изображение из результата и сохраняет его
    new_image = Image.fromarray(output_array)
    new_image.save('new_image_adaptive_singh_threshold_0.png')

image_test = Image.open('/content/test_1.jpg', 'r').convert('RGB')
image_test

image_test = Image.open('/content/test_1.jpg', 'r').convert('RGB')
convert_image_to_grayscale(image_test)

adaptive_singh_threshold(3)

r=Image.open("/content/new_image_adaptive_singh_threshold_0.png", "r").convert("RGB")

r